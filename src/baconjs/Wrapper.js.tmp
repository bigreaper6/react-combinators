import Bacon from "baconjs"
import React from "react"
import {createElement, isValidElement} from "react/lib/ReactElement"
import {keys, values, zip, zipObject} from "../util"

export default class extends React.Component {
  constructor(props, ctx) {
    super(props, ctx)
    const bus = new Bacon.Bus()
    const vdomS = bus
      .startWith(props.children)
      .skipDuplicates()
      .flatMapLatest(Bacon._.id)
      .map(el => {
        if (isValidElement(el)) {
          return el
        } else {
          return createElement("span", {}, el)
        }
      })

    this.state = {
      bus,
      vdomS,
      vdom: null
    }
  }
  updateVDOM(vdom) {
    this.setState({vdom})
  }
  componentWillMount() {
    if (process.browser) {
      this.setState({ dispose: this.state.vdomS.onValue(this.updateVDOM.bind(this)) })
    } else {
      this.state.vdomS.take(1).onValue(this.updateVDOM.bind(this))
    }
  }
  componentWillReceiveProps({children}) {
    this.state.bus.push(children)
  }
  shouldComponentUpdate(nextProps, nextState) {
    return nextState.vdom !== this.state.vdom
  }
  componentWillUnmount() {
    const {dispose} = this.state
    if (dispose) {
      dispose()
    }
  }
  render() {
    return this.state.vdom
  }
}
